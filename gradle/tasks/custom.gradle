import java.nio.file.*

task deployKarutaConfig() {
    group 'project'
    description 'Deploy Karuta-config'
    dependsOn ':projectProperties'
    //mustRunAfter allprojects.collect { it.tasks.matching { it.name.equals('tomcatDeploy') } }

    doLast {

        String serverWebapps = rootProject.ext['buildProperties'].getProperty('server.webapps')

        String appliConfigNames = rootProject.ext['buildProperties'].getProperty('karuta.appliNames')
        if (!appliConfigNames?.trim()) appliConfigNames="${appName}"

        appliConfigNames.split('\\s*,\\s*').each { appliName ->

            logger.lifecycle("Installing ${appliName}-Config to location ${serverWebapps}")
            // check if config file exist else exit in error
            assert file("etc/${appliName}-config").exists()

            /*
            * Create & initialize the folder that is the default location of {project.home].  (If
            * another location has been specified, we don't want to mess with that.)
            */
            String projectHomeDir = "${serverWebapps}/${appliName}-config"
            file(projectHomeDir).deleteDir()
            file(projectHomeDir).mkdirs()
            copy {
                from "etc/${appliName}-config"
                into projectHomeDir
            }

            /** Creating symlink to access to some files like xsl from /karuta project - the backend need it as it access from local file path */
            if (!appliName.equals(appName)){
                Path target = Paths.get("${serverWebapps}","${appName}");
                Path link = Paths.get("${serverWebapps}","${appliName}");
                if (Files.exists(link) && Files.isSymbolicLink(link)) {
                    logger.lifecycle("Removing ${link}")
                    Files.delete(link);
                }
                if (!Files.exists(link)) {
                    logger.lifecycle("Creating ${link} symlink from ${target}")
                    Files.createSymbolicLink(link, target);
                }
            }
        }
    }
}